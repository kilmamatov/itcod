--1.3

СОХРАНЕНИЕ ОБЬЕКТОВ В БД
№1

from core import models

# создание экст служб
a = models.Service(name='Скорая', cod='101', phone='101101')
a.save()

a1 = models.Service.objects.create(name='Полиция', cod='102', phone='102102')

# создание заявителя
b = models.Declarer(name='Иванов Иван Иванович', age='2006-02-03', gender='men')
b.save()

b1 = models.Declarer.objects.create(name='Мирная Мира Мировна', age='1999-02-03', gender='women')

# создание обращения(save())
obr = models.Appeal(number='12',casualties='5')
b = models.Declarer.objects.get(name='Иванов Иван Иванович')
obr.declarer = b
obr.save()

#Создание обращения create()
b = models.Declarer.objects.get(name='Иванов Иван Иванович')
models.Appeal.objects.create(declarer=b, number='13', casualties='1')

№3 Готово
#Добаавление Экст служб(add)
p = models.Appeal.objects.get(pk=1)
ser = models.Service.objects.get(name='Полиция')
p.services.add(ser)

#Добовление Экст служб(set) почитать подробнее чем отличается
obr = models.Appeal.objects.get(number='12')
a = models.Service.objects.get(name='Полиция')
a.appeals.set([obr])

№2
# Создание (обращения) через мендр запросов обьекта (Заявитель)
b = models.Declarer.objects.get(name='Иванов Иван Иванович')
b.appeals.create(number='14',casualties='24')

ЗАПРОСЫ В БД

№1 как из квс получить обьект (first)
models.Declarer.objects.filter(pk=1).first() <Declarer: Зубенко Михаил Петрович>
models.Declarer.objects.filter(pk=1).get() <Declarer: Зубенко Михаил Петрович>
models.Declarer.objects.get(pk=1) <Declarer: Зубенко Михаил Петрович>
models.Declarer.objects.all()[0] <Declarer: Зубенко Михаил Петрович>

№2
1 Способ
z = models.Declarer.objects.get(pk=3)
z.appeals.all()
2 Способ
models.Appeal.objects.filter(declarer__name='Иванов Иван Иванович')

№3
models.Service.objects.all()[:3] #как это называется (срез массива)
(<QuerySet [<Service: Скорая>, <Service: Полиция>, <Service: Пожарная>]>)

№4
models.Declarer.objects.all().reverse()[:3]

№5
1
models.Appeal.objects.latest('created')
models.Appeal.objects.earliest('created')
2
models.Appeal.objects.order_by('created')[0]
models.Appeal.objects.order_by('created').reverse()[0]

№6
models.Appeal.objects.all()[::2]

№7
Одно обращение

№8
models.Appeal.objects.all().count()

№9
models.Appeal.objects.order_by("?").first()
Примечание (медленное выполнение)

ФИЛЬТРАЦИЯ

№1
models.Appeal.objects.filter(declarer__id='2')
<QuerySet [<Appeal: 11 - 2023-04-12>]>

№2 вместо нон использовать лукап Исправил
# models.Declarer.objects.filter(gender='men', appeals=None)
models.Declarer.objects.filter(gender='men', appeals__isnull=True)


№3
models.Declarer.objects.order_by('id')

№4
from datetime import date, timedelta

p = date.today() - timedelta(days=(18*365))

models.Declarer.objects.filter(age__lte=p)

№5
from datetime import date, timedelta

p = date.today() - timedelta(days=(18*365))

models.Declarer.objects.filter(age__gte=p)

№6
models.Declarer.objects.all().exists()

№7
models.Declarer.objects.filter(name__contains='Алекс')

№8
models.Appeal.objects.all().exclude(services__isnull=True)

№9 добавить проверку и через ферст
models.Appeal.objects.filter(services__cod='102')[0].created
p = models.Appeal.objects.filter(services__cod='102').first()
p.created

№10
models.Appeal.objects.filter(created__lt='2023-04-13')

#11
models.Declarer.objects.filter(phone__isnull=True).filter(photo='')

#12
models.Declarer.objects.filter(appeals__services__cod='102')


№13
qs1 = models.Declarer.objects.filter(Q(phone__isnull=True) & Q(photo=''))
qs2 = models.Declarer.objects.filter(appeals__services__cod='102')
qs3 = qs1.union(qs2)
qs3 = qs1.intersection(qs2)
qs3 = qs1.difference(qs2)



№14
models.Appeal.objects.filter(created='2023-04-12')

№15
models.Declarer.objects.filter(phone=None).count()

№16
models.Declarer.objects.order_by('health_status').distinct('health_status')

№17
models.Appeal.objects.filter(description__icontains='КлюЧевое')

№18 сделать по другому
models.Declarer.objects.values('phone')
list(models.Declarer.objects.values_list('phone', flat=True))


№19
models.Declarer.objects.values('name', 'age', 'gender', 'phone', 'photo')


№20 написать в консоле
query = "SELECT * FROM core_service"
result = models.Service.objects.raw(query)
for obj in result:
    print(obj)


№21
p = models.Declarer.objects.get(phone='12341234')
p.phone = 2323
p.save()


№22 другой метон создание либо редакт
p = models.Declarer.objects.get(phone='12341234')
p.phone = 2323
p.save()

models.Declarer.objects.update_or_create(phone='12341234', name='Владимир', age='2002-08-01', gender='men')

почиттать что возвращает = возращает кортеж из обьекта и значения true false(был ли создан новый обьект)

№23
models.Declarer.objects.bulk_create(
[models.Declarer(name='ТЕст', age='2002-11-16', gender='men'),
 models.Declarer(name='ТЕст2', age='2002-11-12', gender='men')]
 )

№24
p = models.Declarer.objects.filter(Q(pk=1) | Q(pk=2))
p.update(health_status='Полностью здоров')


№25
models.Appeal.objects.filter(pk=1).values('declarer__name')


№26 использовать втроенный метод
list(models.Appeal.objects.values_list('number', 'services__cod'))


№27 использовать втроенный метод
list(models.Appeal.objects.values_list('created', flat=True))
appeal_list = [appeal['created'] for appeal in models.Appeal.objects.values('created')]



№28
models.Appeal.objects.none()


№29
from django.db.models import Avg
p = models.Appeal.objects.aggregate(Avg('casualties'))
p['casualties__avg']
8.25


№30
p = models.Appeal.objects.aggregate(Sum('casualties'))
p['casualties__sum']
33

aggregate annotate чем отличается почитаь подробнее
№31
models.Appeal.objects.values('number').annotate(Count("services"))
<QuerySet [
{'number': 11, 'services__count': 0},
{'number': 12, 'services__count': 2},
{'number': 13, 'services__count': 0},
{'number': 14, 'services__count': 1}
]>

№32
p = models.Appeal.objects.annotate(num_services=Count("services")).aggregate(Avg('num_services'))
p['num_services__avg']
0.75

№33
models.Appeal.objects.aggregate(Max('casualties'), Min('casualties'))

№34
list(models.Declarer.objects.values('name').annotate(Count('appeals')))


[{'name': 'ntcn', 'appeals__count': 0},
 {'name': 'Александра', 'appeals__count': 0},
 {'name': 'Алексей', 'appeals__count': 0},
 {'name': 'Дусин Игорь', 'appeals__count': 0},
 {'name': 'Зубенко Михаил Петрович', 'appeals__count': 0},
 {'name': 'Иванов Иван Иванович', 'appeals__count': 3},
 {'name': 'Николев Артем', 'appeals__count': 0},
 {'name': 'Ниникова Нина Редина', 'appeals__count': 0},
 {'name': 'Петя', 'appeals__count': 1},
 {'name': 'Пунин Алексей Владимирович', 'appeals__count': 0},
 {'name': 'ТЕст', 'appeals__count': 0},
 {'name': 'ТЕст2', 'appeals__count': 0}]

list(models.Declarer.objects.values_list('name').annotate(Count('appeals')))

[('nina', 0),
 ('ntcn', 0),
 ('Александра', 0),
 ('Алексей', 0),
 ('Владимир', 0),
 ('Дусин Игорь', 1),
 ('Зубенко Михаил Петрович', 4),
 ('Иванов Иван Иванович', 3),
 ('Николев Артем', 0),
 ('Ниникова Нина Редина', 0),
 ('Петя', 1),
 ('Пунин Алексей Владимирович', 0),
 ('Рустам Мусин', 0),
 ('ТЕст', 0),
 ('ТЕст2', 0)]


-- 1.4 АДМИНКА

@admin.register(models.Appeal)
class Appeal(admin.ModelAdmin):
    list_display = ('number', 'created')
    search_fields = ['number']
    list_filter = ('number',)
    date_hierarchy = 'declarer__age'


@admin.register(models.Service)
class Service(admin.ModelAdmin):
    list_display = ('name',)


class AppealInline(admin.TabularInline):
    model = models.Appeal
    readonly_fields = ['number']


@admin.register(models.Declarer)
class Declarer(admin.ModelAdmin):
    list_display = ('name',)
    inlines = [AppealInline]



----1.5

№1

def appleal(request):
    count = models.Appeal.objects.count()
    if count:
        return HttpResponse(count)
    else:
        raise Http404

№2

def declarer_phone(request, pk):
    qs = models.Declarer.objects.get(pk=pk)
    phone = qs.phone
    if phone:
        return HttpResponse(phone)
    else:
        raise Http404

№3
def no_admin(request):
    return redirect('/admin/')

№4
def val(request, values):
    return HttpResponse(values)


№5
def serp(request, values):
    phone = models.Declarer.objects.filter(phone=values).values()
    if phone:
        return HttpResponse(phone)
    else:
        raise Http404
-----
def serp(request, values):
    object_list = []
    for p in models.Declarer.objects.filter(phone=values):
        object_list.append({
            'id': p.id,
            'name': p.name,
            'age': p.age,
            'gender': p.gender,
            'phone': p.phone,
            'health_status': p.health_status
        })
        return HttpResponse({'result': object_list})


№6

def declarer_js(request, pk):
    object_list = []
    for p in models.Declarer.objects.filter(pk=pk):
        object_list.append({
            'id': p.id,
            'name': p.name,
            'age': p.age,
            'gender': p.gender,
            'phone': p.phone,
            'health_status': p.health_status
        })
    return JsonResponse({'Declarer': object_list})

-----URLS

№1
path('', include(core.urls, namespace='core')),

app_name = 'core'

№2-4
urlpatterns = [
    path('appleal/', core.views.appleal, name='appleal'),
    path('declarer_phone/<int:pk>/', core.views.declarer_phone, name='declarer_phone'),
    path('no_admin/', core.views.no_admin, name='no_admin'),
    path('val/<str:values>', core.views.val, name='val'),
    path('serp/<str:values>', core.views.serp, name='serp'),
    path('declarer_js/<int:pk>', core.views.declarer_js, name='declarer_js'),
]

---ДОПОЛНИТЕЛЬНОЕ
appeal.html
№1
# def appeal_detail(request, pk):
#     a = models.Appeal.objects.all()
#     appeals = models.Appeal.objects.filter(pk=pk)
#     service = models.Service.objects.filter(appeals__pk=pk)
#     return render(request, 'core/appeal.html', {'appeals': appeals, 'service': service, 'a': a})

declarer.html

# def declarer_detail(request, pk):
#     declarers = models.Declarer.objects.filter(pk=pk)
#     return render(request, 'core/declarer.html', {'declarers': declarers})

service.html

# def service_detail(request, pk):
#     services = models.Service.objects.filter(pk=pk)
#     return render(request, 'core/service.html', {'services': services})

№2

appeal_list.html

# def appeal_list(request):
#     appeals = models.Appeal.objects.all()
#     return render(request, 'core/appeal_list.html', {'appeals': appeals})

declarer_list.html

# def declarer_list(request):
#     declarers = models.Declarer.objects.all()
#     return render(request, 'core/declarer_list.html', context={'title': 'Список заявителей', 'declarers': declarers})

№3

# def index(request):
#     return render(request, 'core/index.html', context={'title': 'Главная страница'})
Тут я засунул все ссылки в базовый шаблон(немного не по заданию но так было удобнее)
base.html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{% block title %} {{ title }} {% endblock %}</title>
</head>
<body>
    <br><a href="/appeals/">appeals</a>
    <br><a href="/declarers/">declarers</a>
    <br><a href="/services/">services</a> <a href="/service_create/">service_create</a>
    <br><a href="/appeal_list/">appeal_list</a> <a href="/appeal_create/">appeal_create</a>
    <br><a href="/declarer_list/">declarer_list</a> <a href="/declarer_create/">declarer_create</a>
    <br>{% block content %}{% endblock %}
</body>
</html>

---ШАБЛОНЫ
№1-2
base.html

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{% block title %} {{ title }} {% endblock %}</title>
</head>
<body>
    <br><a href="/appeals/">appeals</a>
    <br><a href="/declarers/">declarers</a>
    <br><a href="/services/">services</a> <a href="/service_create/">service_create</a>
    <br><a href="/appeal_list/">appeal_list</a> <a href="/appeal_create/">appeal_create</a>
    <br><a href="/declarer_list/">declarer_list</a> <a href="/declarer_create/">declarer_create</a>
    <br>{% block content %}{% endblock %}
</body>
</html>

№3
declarer.html

    <ol>
        {% for p in declarers %}
        <li>Имя: {{p.name|title}}</li>
        <li>Возраст: {{p.age}}</li>
        <li>Пол: {{p.gender}}</li>
        <li>Телефон: {{p.phone|default_if_none:"-"}}</li>
        <li>Фото: {{p.photo|default:"-"}}</li>
        <li>Состояние здоровья: {{p.health_status}}</li>
        <br><a href="/edit_declarer/{{p.pk}}">Редактирование</a>
        {% endfor %}
    </ol>

№4
appeal.html

    {% for p in appeals %}
        <h4>Номер обращения: {{p.number}}</h4>
        <h4>Имя заявителя: {{p.declarer.name}}</h4>
        <h4>Время обращения: {{p.created|date:"D d M Y"}}</h4>
        <h4>Прошло с обращения: {{p.created|timesince}}</h4>
        <h4>количество пострадавших: {{p.casualties}}</h4>
        <h4>Не звонить: {{p.dont_call|yesno:"Да,Нет"}}</h4>
        <h4>Описание</h4>
        {% if p.description %}
        {{p.description}}
        {% else %}
        <h5>Описания нет</h5>
        {% endif %}
        {% if p.services %}
        <h4>Экстренные службы: {{p.services.all|join:', '|upper}}</h4>
        {% else %}
        <h5>Служб нет</h5>
        {% endif %}
    {% endfor %}

№5
declarer_list.html

        {% if forloop.first %}
            cod
        {% elif forloop.last %}
            cod

№6
footer.html

<footer class="footer">
    <div class="container">
        <div class="row">
            <div class="col-md-12 text-center">
                <p>{% now "SHORT_DATETIME_FORMAT"%} Время</p>
            </div>
        </div>
    </div>
</footer>

Подключение
{% include "core/footer.html" with year=y %}

№7
appeal.html
declarer.html

№8
declarer.html

    <ol>
        {% for p in declarers %}
        <li>Имя: {{p.name|title}}</li>
        <li>Возраст: {{p.age}}</li>
        <li>Пол: {{p.gender}}</li>
        <li>Телефон: {{p.phone|default_if_none:"-"}}</li>
        <li>Фото: {{p.photo|default:"-"}}</li>
        <li>Состояние здоровья: {{p.health_status}}</li>
        <br><a href="/edit_declarer/{{p.pk}}">Редактирование</a>
        {% endfor %}
    </ol>

№10
appeal.html

    {% for p in appeals %}
        <h4>Номер обращения: {{p.number}}</h4>
        <h4>Имя заявителя: {{p.declarer.name}}</h4>
        <h4>Время обращения: {{p.created|date:"D d M Y"}}</h4>
        <h4>Прошло с обращения: {{p.created|timesince}}</h4>
        <h4>количество пострадавших: {{p.casualties}}</h4>
        <h4>Не звонить: {{p.dont_call|yesno:"Да,Нет"}}</h4>
        <h4>Описание</h4>
        {% if p.description %}
        {{p.description}}
        {% else %}
        <h5>Описания нет</h5>
        {% endif %}
        {% if p.services %}
        <h4>Экстренные службы: {{p.services.all|join:', '|upper}}</h4>
        {% else %}
        <h5>Служб нет</h5>
        {% endif %}
    {% endfor %}

---CLASS-BASED-VIEWS

class appeal_detail(View):
    template_name = 'core/appeal.html'

    def get(self, request, pk):
        a = models.Appeal.objects.all()  # для быстрого меню между обащениями
        appeals = models.Appeal.objects.filter(pk=pk)
        service = models.Service.objects.filter(appeals__pk=pk)
        return render(request, self.template_name, {'appeals': appeals, 'service': service, 'a': a})


class declarer_detail(View):
    template_name = 'core/declarer.html'

    def get(self, request, pk):
        declarers = models.Declarer.objects.filter(pk=pk)
        return render(request, self.template_name, {'declarers': declarers})


class service_detail(View):
    template_name = 'core/service.html'

    def get(self, request, pk):
        services = models.Service.objects.filter(pk=pk)
        return render(request, self.template_name, {'services': services})


class appeal_list(TemplateView):
    template_name = 'core/appeal_list.html'

    def get_context_data(self, **kwargs):
        c = super().get_context_data(**kwargs)
        c['appeals'] = models.Appeal.objects.all()
        return c


class index(TemplateView):
    template_name = 'core/index.html'


class declarer_list(TemplateView):
    template_name = 'core/declarer_list.html'

    def get_context_data(self, **kwargs):
        c = super().get_context_data(**kwargs)
        c['title'] = 'Список заявителей'
        c['declarers'] = models.Declarer.objects.all()
        return c


---1.6 ФОРМЫ

№1
формы для создания и редактирования

class ApplealForm(forms.ModelForm):
    services = forms.ModelMultipleChoiceField(
        queryset=models.Service.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False,
        label='Службы'
    )

    class Meta:
        model = models.Appeal
        fields = '__all__'


class DeclarerForm(forms.ModelForm):

    class Meta:
        model = models.Declarer
        fields = '__all__'
        widgets = {
            'health_status': forms.Textarea(attrs={'cols': 50, 'rows': 10})
        }

    def clean_phone(self):
        phone = self.cleaned_data['phone']
        if len(str(phone)) > 11:
            raise ValidationError('Не может быть длинее 11')
        return phone

    def clean_age(self):
        age = self.cleaned_data['age']
        if age > date.today():
            raise ValidationError('Дата не может быть в будущем')
        return age


class ServiceForm(forms.ModelForm):
    cod = forms.CharField(help_text='Подсказка', label='Код')

    class Meta:
        model = models.Service
        fields = '__all__'

№2 шаблоны
appeal_create.html
declarer_create.html
service_create.html
edit_service.html
edit_declarer.html
edit_appeal.html

№3 вьюхи

def appeal_create(request):
    title = 'Создание обращения'
    if request.method == 'POST':
        form = ApplealForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('/')
    else:
        form = ApplealForm()
    return render(request, 'core/appeal_create.html', {'title': title, 'form': form})


def edit_appeal(request, pk):
    title = 'Редактирование обращения'
    appeal = models.Appeal.objects.get(id=pk)
    if request.method == 'POST':
        form = ApplealForm(request.POST, instance=appeal)
        if form.is_valid():
            form.save()
    else:
        form = ApplealForm(instance=appeal)
    return render(request, 'core/edit_appeal.html', {'title': title, 'form': form})


def declarer_create(request):
    title = 'Создание пользователя'
    if request.method == 'POST':
        form = DeclarerForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('/')
    else:
        form = DeclarerForm()
    return render(request, 'core/declarer_create.html', {'title': title, 'form': form})


def edit_declarer(request, pk):
    declarer = models.Declarer.objects.get(id=pk)
    if request.method == 'POST':
        form = DeclarerForm(request.POST, instance=declarer)
        if form.is_valid():
            form.save()
    else:
        form = DeclarerForm(instance=declarer)
    return render(request, 'core/edit_declarer.html', {'form': form})


def service_create(request):
    if request.method == 'POST':
        form = ServiceForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('/')
    else:
        form = ServiceForm()
    return render(request, 'core/service_create.html', {'form': form})


def edit_service(request, pk):
    service = models.Service.objects.get(id=pk)
    if request.method == 'POST':
        form = ServiceForm(request.POST, instance=service)
        if form.is_valid():
            form.save()
    else:
        form = ServiceForm(instance=service)
    return render(request, 'core/edit_service.html', {'form': form})




